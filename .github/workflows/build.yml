# ----------------------------------------------------------------------------
# GitHub Actions workflow to build the library and examples.
#
# See docs:
# - https://castle-engine.io/github_actions
# - https://docs.github.com/en/actions
# ----------------------------------------------------------------------------

name: Build

on:
  pull_request:
  push:
  repository_dispatch:
    types: [cge-docker-unstable-changed]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    strategy:
      matrix:
        runner: [
          ubuntu-latest,
          windows-latest,
          # last Intel-based macOS
          macos-12
        ]
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: castle-engine/castle-engine

      - name: Install FPC+Lazarus
        uses: gcarreno/setup-lazarus@v3.3.1
        with:
          lazarus-version: stable

      # - name: Install Linux dependencies
      #   if: ${{ matrix.runner == 'ubuntu-latest' }}
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get --no-install-recommends -y install libgl-dev

      # Build Castle Game Engine and set related environment variables.
      - name: Castle Game Engine - Env CASTLE_ENGINE_PATH
        run: echo "CASTLE_ENGINE_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Castle Game Engine - Env PATH (Windows)
        if: ${{ matrix.runner == 'windows-latest' }}
        run: echo "PATH=${PATH}:`cygpath --unix ${CASTLE_ENGINE_PATH}/installed/bin/`" >> $GITHUB_ENV
      - name: Castle Game Engine - Env PATH (non-Windows)
        if: ${{ ! matrix.runner == 'windows-latest' }}
        run: echo "PATH=$PATH:$CASTLE_ENGINE_PATH/tools/build-tool/" >> $GITHUB_ENV
      - name: Castle Game Engine - Build
        run: cd $CASTLE_ENGINE_PATH/tools/build-tool/ && ./castle-engine_compile.sh

      - name: Set environment FPC_OS
        run: echo "FPC_OS="`fpc -iTO` >> $GITHUB_ENV
      - name: Set environment FPC_CPU
        run: echo "FPC_CPU="`fpc -iTP` >> $GITHUB_ENV

      - name: Build
        run: |
          cd src/deprecated_library/
          ./castleengine_compile.sh

      - name: Archive Artifacts (Linux)
        if: ${{ matrix.runner == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: "*.so"
          if-no-files-found: error

      - name: Archive Artifacts (Windows)
        if: ${{ matrix.runner == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: "*.dll"
          if-no-files-found: error

      - name: Archive Artifacts (macOS)
        if: ${{ matrix.runner == 'macos-12' }}
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: "*.dylib"
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Download packaged releases
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: List downloaded files
      run: ls -R
    - name: GH CLI status
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh auth status
    # Releases files in the "snapshot" release.
    - name: Release Artifacts
      if: ${{ github.ref == 'refs/heads/master' }}
      run: gh release --repo ${{ github.repository }} upload snapshot --clobber *.zip *.tar.gz *.apk
      env:
        GH_TOKEN: ${{ github.token }}

  update-release-tag:
    name: Update Release Tag (make snapshot tag point to the build commit on master branch)
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    - uses: actions/checkout@v4
    - name: Update Release Tag
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        # --force allows to overwrite previous tag
        git tag --force snapshot
        # --force allows to push with overwritten tag
        git push --force origin snapshot
